Rough todo
==========

[num] = Priority. Lower numbers = higher priority. Only [1] is guaranteed to be tried to fit into the next version.

x [1] Code some general menu:
    x Poking memory.
    x Execute a JSR.
    x Submenues.
    x Be able to "go back".
    x Remember last position.
    x press B to go back (not from main menu)?
    x choice menu item
    x background gfx
    x use left/right to toggle choice menu items
    x make each (sub) menu have a header
    x choice jsr widget
    - number widget (min and max)
        * should maybe make a general function to handle checking these bounds since it comes up all the time
        * support repeating inputs (holding dpad button)
    - support menues longer than the screen
    - fix fonts..
        - letters: '?
    - make sure to only go to this game mode when its safe to do so
        - not while bringing up the item menu
        - not before selecting a file

- [1] Move controller 2 inputs to the menu.
    x Toggles
    x Equipment
    - Equipment 2

- [1] Add buncha cool stuff to the menu. Inventory/game state editing etc.
    - Items
    - Need to initialize the ram_cm_* variables when loading a game.
        - Might be better to do this every time you open the menu. Perhaps a custom code is needed, not generic.

- [1] Teleport "anywhere".

- [1] Show all 3 digits for enemy HP.

- [2] Hack Module_Intro to go to file select as soon as everything needed is initialized.

- [2] Add some footprint w/version (intro, file select, pause menu).

- [2] Make it possible to show the hidden line-of-sight sprites.

- [3] Ingame manual counter (to practice a trick X times and see your success rate).

- [3] Reenable floor indicator and position it underneath counters.

- [3] Lagometer. Toggleable feature that makes the magic go down/up depending on how laggy a frame was.

- [3] Better frame advance mode. Perhaps only pause while holding L in, and if you press R while holding L it advances
      the game one frame. Would be good for clip practice.

- [3] Slowdown

- [3] Make counters not run while game is paused (frame advance mode). Can be useful for TAS-ing rooms.

- [3] Save best room times. Make them persist through save/load state.
      This can then be exportable through a web ui. Could even include WR times in next version. Or perhaps a "patch your
      SRM with WR times" web ui. Holy carp.  

- [3] Mashing minigame (mps, max frames w/o mash, frames lost total etc)

- [3] Reconfigurable controls (save/load state mostly)

- [8] Record inputs (and play them back from state). The holy grail. Would need to replace the RNG to a deterministic
      one. Probably won't happen.

- [9] Level editor. Ha.


Menu widgets
============

[ ] = checkboxes
    press A to toggle.

* = buttons/actions
    press A to perform the action.

[A | B | C] = choice fields
    press A to open a dropdown or use < > to toggle between choices.

[0-999] = text inputs
    hold ^ or v to increment/decrement


Menu spec
=========

- Equipment
    * Get full equipment
    [ ] Bow
    [ ] Boomerang
    [ ] .. etc

- Resources
    Sword: [Fighter | Master | Tempered | Gold]
    Shield
    Armor
    Rupees: [0-999]
    Hearts
    Bombs
    Arrow
    Keys

- Teleport
    [ ] Change to appropriate game state (equipment etc) for the chosen segment
        - Mode [Any% NMG | 100% | ..]
    [ ] I use sanc heart
    * Escape
    * Eastern
    * Desert (Overworld)
    * Desert (Dungeon)
    * etc..

- Game state
    Game phase [Uncle | Saved Zeldo | Helped old man | ..?]
    [ ] Killed Armos
    [ ] Killed Lammolas
    etc..
    [ ] Opened Theives' Town
    [ ] Did digging game
    etc..

- Toggle feature
    [ ] Counters
    [ ] Input display
    [ ] Enemy HP
    [ ] Coordinates
    [ ] QW indicator
    [ ] Lit rooms
    [ ] OoB Mode
    [ ] LoS sprites


Notes
=====
%a16()
LDA.w #$6 : STA $1AF0

%ai8()
LDA $10 : STA $010C
LDA #$0E : STA $10
LDA #$0A : STA $11
LDA #$6 : STA $0200

7EF3C5-7EF3C8 = diff game phase things.
7EF3C5=1 = got sword from uncle
7EF3CC = zelda bitching (set to 0)

BCC = BLT
BCS = BGT

7EF366 = Big key array, indexed by 040C. Masks found in 98C0:
  LDY $040C : LDA $7EF366 : AND $98C0, Y : BNE .haveKey
